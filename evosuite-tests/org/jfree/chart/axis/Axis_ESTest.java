/*
 * This file was automatically generated by EvoSuite
 * Mon May 31 17:54:37 GMT 2021
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedString;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartElementVisitor;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.api.RectangleEdge;
import org.jfree.chart.api.RectangleInsets;
import org.jfree.chart.axis.AxisLabelLocation;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.swing.ChartPanel;
import org.jfree.chart.text.TextAnchor;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setTickMarkPaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis(".b3IMZ", stringArray0);
      symbolAxis0.setTickMarkInsideLength(1617.039F);
      assertEquals(1617.039F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarksVisible(false);
      assertFalse(dateAxis0.isTickMarksVisible());
      
      dateAxis0.setTickMarksVisible(true);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setTickLabelFont(jFreeChart0.DEFAULT_TITLE_FONT);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.category.CategoryToPieDataset");
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      extendedCategoryAxis0.setAxisLinePaint(systemColor0);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis();
      categoryAxis0.setLabelInsets(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      categoryAxis0.setLabelInsets(dateAxis0.DEFAULT_TICK_LABEL_INSETS, true);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setVisible(false);
      assertFalse(dateAxis0.isVisible());
      
      dateAxis0.setVisible(true);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      ChartElementVisitor chartElementVisitor0 = mock(ChartElementVisitor.class, new ViolatedAssumptionAnswer());
      dateAxis0.receive(chartElementVisitor0);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("46PWX:ZRnC:.ySRNR");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      extendedCategoryAxis0.setPlot(combinedRangeCategoryPlot0);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("YFU5^,%5-M*)!CE");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(extendedCategoryAxis0);
      extendedCategoryAxis0.notifyListeners(axisChangeEvent0);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C_wIHf&");
      extendedCategoryAxis0.hashCode();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.fireChangeEvent();
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(44);
      valueAxis0.addChangeListener(combinedDomainXYPlot0);
      assertEquals(2.0F, valueAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertTrue(valueAxis0.isTickMarksVisible());
      assertTrue(valueAxis0.isVisible());
      assertFalse(valueAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, valueAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(valueAxis0.isTickLabelsVisible());
      assertTrue(valueAxis0.isAxisLineVisible());
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ChartElementVisitor chartElementVisitor0 = mock(ChartElementVisitor.class, new ViolatedAssumptionAnswer());
      thermometerPlot0.receive(chartElementVisitor0);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      Rectangle rectangle0 = new Rectangle(12, (-3536), 500, (-928));
      periodAxis0.labelLocationY(axisLabelLocation0, rectangle0);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      Rectangle2D rectangle2D1 = dateAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle(rectangle2D0, true, true);
      extendedCategoryAxis0.labelLocationX(axisLabelLocation0, rectangle2D1);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("zone");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(2.0F, (-176.656801), (-2668.084), 198.7603152, 0.0, 0.05);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      double double0 = logarithmicAxis0.labelLocationX(axisLabelLocation0, rectangle2D0);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals((-1332.042), double0, 0.01);
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("@e~CXN,a");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      extendedCategoryAxis0.labelAnchorV(axisLabelLocation0);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C\"6dwx|QQ%uY`04k!C");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      extendedCategoryAxis0.labelAnchorH(axisLabelLocation0);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.isVisible();
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      boolean boolean0 = dateAxis0.isTickMarksVisible();
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      boolean boolean0 = categoryAxis0.isTickLabelsVisible();
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(boolean0);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("4i)6x)%O1,u4V0;G%}");
      boolean boolean0 = extendedCategoryAxis0.isMinorTickMarksVisible();
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(boolean0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<REE&");
      Locale locale0 = new Locale("org.jfree.chart.axis.NumberAxis", "<REE&", "insets");
      DateAxis dateAxis0 = new DateAxis("", timeZone0, locale0);
      boolean boolean0 = dateAxis0.isAxisLineVisible();
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C\"6dwx|QQ%uY`04k!C");
      extendedCategoryAxis0.getTickMarkStroke();
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Color color0 = (Color)dateAxis0.getTickMarkPaint();
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(128, color0.getRed());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1208.407);
      float float0 = cyclicNumberAxis0.getTickMarkOutsideLength();
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, float0, 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("zone");
      float float0 = logarithmicAxis0.getTickMarkInsideLength();
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Color color0 = (Color)dateAxis0.getTickLabelPaint();
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("zone");
      RectangleInsets rectangleInsets0 = subCategoryAxis0.getTickLabelInsets();
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.ree.chOrt.plot.Crossh$Zr");
      Font font0 = logarithmicAxis0.getTickLabelFont();
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(10, font0.getSize());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("~=SD|y>z,^<VQ'TQ3SP");
      periodAxis0.getPlot();
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("'SHd!GaU`.");
      double double0 = extendedCategoryAxis0.getFixedDimension();
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, double0, 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C\"6dwx|QQ%uY`04k!C");
      extendedCategoryAxis0.getAxisLineStroke();
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("edge");
      dateAxis0.getAttributedLabel();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      dateAxis0.equals("zone");
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("46PWX:ZRnC:.ySRNR");
      subCategoryAxis0.createAttributedLabel("46PWX:ZRnC:.ySRNR");
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("zone");
      ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis)extendedCategoryAxis0.clone();
      assertEquals(2.0F, extendedCategoryAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isVisible());
      assertFalse(extendedCategoryAxis1.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis1.isTickMarksVisible());
      assertNotSame(extendedCategoryAxis1, extendedCategoryAxis0);
      assertEquals(0.0F, extendedCategoryAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 898.3867885826213, (String) null);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.ree.chOrt.plot.Crossh$Zr");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(".b3IMZ");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("zone");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      // Undeclared exception!
      try { 
        dateAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("YFU5^,%5-M*)!CE");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis(".b3IMZ", stringArray0);
      // Undeclared exception!
      try { 
        symbolAxis0.setAttributedLabel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't add attribute to 0-length text
         //
         verifyException("java.text.AttributedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      // Undeclared exception!
      try { 
        symbolAxis0.labelLocationY(axisLabelLocation0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis(".b3IMZ", stringArray0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        symbolAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Fri Feb 14 20:21:21 GMT 2014");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("I|H");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", logarithmicAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 100, 999, (-3192), 999, 999, 1, true, true, true, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(999, 999, (double) 500, 2.302585092994046, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        subCategoryAxis0.drawAttributedLabel((AttributedString) null, graphics2D0, rectangle0, rectangle0, rectangleEdge0, (AxisState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS, true);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("zone");
      extendedCategoryAxis0.createAttributedLabel((String) null);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("PpclpY\"PE");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.createAttributedLabel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't add attribute to 0-length text
         //
         verifyException("java.text.AttributedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("YFU5^,%5-M*)!CE");
      extendedCategoryAxis0.setAttributedLabel((AttributedString) null);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C_wIHf&");
      AttributedString attributedString0 = new AttributedString("qh']@T)P\"[k 8ZM");
      extendedCategoryAxis0.setAttributedLabel(attributedString0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.ree.chOrt.plot.Crossh$Zr");
      double double0 = subCategoryAxis0.getLabelAngle();
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, double0, 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Font font0 = dateAxis0.getLabelFont();
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("'SHd!GaU`.");
      Color color0 = (Color)extendedCategoryAxis0.getLabelPaint();
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("8`wYX");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("zone");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(2.0F, subCategoryAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isVisible());
      assertFalse(subCategoryAxis1.isMinorTickMarksVisible());
      assertFalse(boolean0);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis1.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("{8OUy!D/M/eb/", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeCategoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1825, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("&Wf");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-3252), 500, (-1815), 3000, (-3252), 0, false, false, false, true, true, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, false, false);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 0.05, rectangle2D0, rectangle0, rectangleEdge0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("4n^{Y%_J@fox");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      TextAnchor textAnchor0 = extendedCategoryAxis0.labelAnchorV(axisLabelLocation0);
      assertEquals(TextAnchor.CENTER_LEFT, textAnchor0);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("46PWX:ZRnC:.ySRNR");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      extendedCategoryAxis0.labelAnchorV(axisLabelLocation0);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("4n^{Y%_J@fox");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      extendedCategoryAxis0.labelAnchorH(axisLabelLocation0);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.ree.chOrt.plot.Crossh$Zr");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      logarithmicAxis0.labelAnchorH(axisLabelLocation0);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("zone", stringArray0);
      Rectangle rectangle0 = new Rectangle(500, 500);
      symbolAxis0.labelLocationY(axisLabelLocation0, rectangle0);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("zone", stringArray0);
      Rectangle rectangle0 = new Rectangle(2, (-2298));
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      symbolAxis0.labelLocationY(axisLabelLocation0, rectangle0);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.LOW_END;
      Rectangle rectangle0 = new Rectangle();
      dateAxis0.labelLocationX(axisLabelLocation0, rectangle0);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[12];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.HIGH_END;
      // Undeclared exception!
      try { 
        dateAxis0.labelLocationX(axisLabelLocation0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1005, 10, chartRenderingInfo0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      boolean boolean0 = extendedCategoryAxis0.hasListener(combinedDomainCategoryPlot0);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(boolean0);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("YFU5^,%5-M*)!CE");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      boolean boolean0 = extendedCategoryAxis0.hasListener(xYAreaRenderer0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1208.407);
      CombinedDomainXYPlot<Integer> combinedDomainXYPlot0 = new CombinedDomainXYPlot<Integer>(cyclicNumberAxis0);
      Stroke stroke0 = combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      cyclicNumberAxis0.setTickMarkStroke(stroke0);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("zone");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      cyclicNumberAxis0.setTickMarkStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      assertTrue(dateAxis0.isTickMarksVisible());
      
      dateAxis0.setTickMarksVisible(true);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickLabelInsets(combinedDomainCategoryPlot0.DEFAULT_INSETS);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      DateAxis dateAxis0 = new DateAxis("D#?A_>yfs");
      dateAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C\"6dwx|QQ%uY`04k!C");
      extendedCategoryAxis0.setTickLabelFont(extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.renderer.xy.XYErrorRenderer");
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      
      logarithmicAxis0.setMinorTickMarksVisible(true);
      assertTrue(logarithmicAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      
      logarithmicAxis0.setMinorTickMarksVisible(false);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(false);
      assertFalse(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      dateAxis0.setLabelInsets(combinedDomainCategoryPlot0.DEFAULT_INSETS, false);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelInsets(categoryAxis0.DEFAULT_TICK_LABEL_INSETS, true);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("'SHd!GaU`.");
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      extendedCategoryAxis0.setLabelFont(font0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("xq*");
      extendedCategoryAxis0.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      extendedCategoryAxis0.setAttributedLabel("xq*");
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isVisible());
      
      dateAxis0.setVisible(false);
      boolean boolean0 = dateAxis0.isVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isVisible());
      
      dateAxis0.setVisible(true);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("YFU5^,%5-M*)!CE");
      extendedCategoryAxis0.setLabel("YFU5^,%5-M*)!CE");
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.receive((ChartElementVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("8`wYX");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      subCategoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.ree.chOrt.plot.Crossh$Zr");
      logarithmicAxis0.setTickMarkOutsideLength((-1294.4055F));
      assertEquals((-1294.4055F), logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1208.407);
      float float0 = cyclicNumberAxis0.getMinorTickMarkInsideLength();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      JFreeChart jFreeChart0 = new JFreeChart("Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(154, 10, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setAxisLineVisible(true);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("E[");
      Color color0 = Color.orange;
      extendedCategoryAxis0.setLabelPaint(color0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis(".b3IMZ");
      AxisLabelLocation axisLabelLocation0 = AxisLabelLocation.MIDDLE;
      dateAxis0.setLabelLocation(axisLabelLocation0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("C\"6dwx|QQ%uY`04k!C");
      extendedCategoryAxis0.setMinorTickMarkOutsideLength((-1889.737F));
      assertEquals((-1889.737F), extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.renderer.xy.XYErrorRenderer");
      logarithmicAxis0.setLabelAngle(1710.72612024);
      assertEquals(1710.72612024, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarkPaint(categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(".b3IMZ");
      extendedCategoryAxis0.setMinorTickMarkInsideLength((-3.0F));
      assertEquals((-3.0F), extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DateAxis dateAxis0 = new DateAxis(stringArray0[0]);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0, false, (XYToolTipGenerator) null);
      Stroke stroke0 = candlestickRenderer0.getDefaultStroke();
      dateAxis0.setAxisLineStroke(stroke0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getLabelLocation();
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(".b3IMZ");
      logarithmicAxis0.setFixedDimension(1066.7284611471);
      assertEquals(1066.7284611471, logarithmicAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("state");
      Color color0 = Color.magenta;
      extendedCategoryAxis0.setTickLabelPaint(color0);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(627, 1635);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LogAxis logAxis0 = new LogAxis("?r2au2");
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      logAxis0.draw(graphics2D0, 0.0F, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }
}
